---
swagger: 2.0
basePath: /prod
info:
  title: AwsSamExample2
schemes:
- https
paths:
  /pets:
    get:
      produces:
      - application/json
      responses:
        '200':
          description: 200 response
          schema:
            $ref: "#/definitions/Empty"
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: 200
        # NOTE: ${LambdaFunction} must match the Lambda resourcename
        uri:
          Fn::Sub: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetHelloWorldTwo.Arn}/invocations"
        credentials: arn:aws:iam::443954526038:role/CodeStarWorker-lambdatest-Lambda
        passthroughBehavior: when_no_match
        httpMethod: POST
        type: aws_proxy
    post:
      produces:
      - application/json
      responses:
        '200':
          description: 200 response
          schema:
            $ref: "#/definitions/Empty"
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: 200
        # NOTE: ${LambdaFunction} must match the Lambda resourcename
        uri:
          Fn::Sub: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetHelloWorldTwo.Arn}/invocations"

        passthroughBehavior: when_no_match
        httpMethod: POST
        type: aws_proxy
    options:
      consumes:
      - application/json
      produces:
      - application/json
      responses:
        '200':
          description: 200 response
          schema:
            $ref: "#/definitions/Empty"
          headers:
            Access-Control-Allow-Origin:
              type: string
            Access-Control-Allow-Methods:
              type: string
            Access-Control-Allow-Headers:
              type: string
      x-amazon-apigateway-integration:
        responses:
          default:
            statusCode: 200
            responseParameters:
              method.response.header.Access-Control-Allow-Methods: "'DELETE,GET,HEAD,OPTIONS,PATCH,POST,PUT'"
              method.response.header.Access-Control-Allow-Headers: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
              method.response.header.Access-Control-Allow-Origin: "'*'"
        passthroughBehavior: when_no_match
        requestTemplates:
          application/json: "{\"statusCode\": 200}"
        type: mock
  /pets:
      get:
        produces:
        - application/json
        responses:
          '200':
            description: 200 response
            schema:
              $ref: "#/definitions/Empty"
        x-amazon-apigateway-integration:
          responses:
            default:
              statusCode: 200
          # NOTE: ${LambdaFunction} must match the Lambda resourcename
          uri:
            Fn::Sub: "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetHelloWorldTwo.Arn}/invocations"
          passthroughBehavior: when_no_match
          httpMethod: POST
          type: aws_proxy
definitions:
  Empty:
    type: object
    title: Empty Schema